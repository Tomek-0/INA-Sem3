@startuml
!define STYLE bold

package "Server System" {
    class main {
        + int main()
    }

    class Server {
        + Server(int port = PORT)
        + ~Server()
        + bool init_server()
        + void start_server()
	+ void send_message(const std::string& message, const int& client_id)
        + void broadcast_message(const std::string& message)
        + void handle_client(int client_socket, int client_number, struct sockaddr_in client_addr)
        --
        - int port
        - int server_fd
    	- std::unordered_map<int, int> client_sockets;
        - std::mutex client_mutex
	- ServerController* controller;
        --
        - void server_input_thread()
        - void loop_new_clients()
    }

    class ServerController {
    	// Calls info send to clients and responds to client messages.
	--
	+ void parse_call(const std::string& message, int client_number);
	+ void send_call(const std::string& message, int client_number);

	+ void add_game(Game game)
	+ void delete_game(int game_id)
	+ std::vector<Game> game_list()

	+ void update_player_status(int client_number, int status)
	+ void add_player_to_game(int client_number, int id)
        --
	- Server* server;
	- std::unordered_map<int, std::unique_ptr<AbstractCommand>> command_registry_;
	- std::unordered_map<int, Game> current_games
	- std::unordered_map<int, int> player_status : // Client_id to current game or -1 for not in game
	--
	- void initialize_commands();
    }

    class AbstractCommand {
        // Abstract Command for Commands design pattern
        --
    	+ void execute(const std::vector<int>& args, int client_number)
    }

    class CmdAddGame {
        // Add game command
        --
    	+ void execute(const std::vector<int>& args, int client_number)
    }

    class CmdListGames {
	// List games to viever
        --
    	+ void execute(const std::vector<int>& args, int client_number)
    }

    class CmdJoinGame {
	// Join game
	--
    	+ void execute(const std::vector<int>& args, int client_number)
    }

    class CmdMove {
	// Move in game
	--
    	+ void execute(const std::vector<int>& args, int client_number)
    }

    class CmdExitGame {
	// Exit game
	--
    	+ void execute(const std::vector<int>& args, int client_number)
    }

    class Game {
        // Game logic and move functions.
	--
	+ Game()
	+ ~Game()

	+ int get_id()
	+ int get_game_type() // Max number of players in game
	+ int get_players() // Current players in lobby

	+ void add_player(int client_number);
	+ void remove_player(int client_number);

	+ void game_logic() // Called after each function
	+ void move(int client_id)
	+ void end()
        --
        - std::vector<int> players;
	- int id;
	- int game_type;
	- Board board
    }

    class Board {
        + void setup_board(int num_players)
        --
        // Details about the board's layout and logic can go here
    }
}

main --> Server : creates and uses
Server --> ServerController : calls functions
ServerController --> Server : calls functions
ServerController --> Game : manages multiple games
Game --> Board : contains a board for each game

CmdAddGame -right-> ServerController
CmdListGames -right-> ServerController
CmdJoinGame -right-> ServerController
CmdMove -right-> ServerController
CmdExitGame -right-> ServerController

ServerController --> AbstractCommand
CmdAddGame -|> AbstractCommand
CmdListGames -|> AbstractCommand
CmdJoinGame -|> AbstractCommand
CmdMove -|> AbstractCommand
CmdExitGame -|> AbstractCommand

ServerController -right-> CmdAddGame
ServerController -right-> CmdListGames
ServerController -right-> CmdJoinGame
ServerController -right-> CmdMove
ServerController -right-> CmdExitGame

@enduml
